plugins {
	id 'com.gladed.androidgitversion' version '0.4.5'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

androidGitVersion {
	codeFormat = "MNNPPBBBB"
	format = "%tag%%-count%%-branch%%-dirty%"
	prefix = "v"  // Only tags beginning with v are considered.
	untrackedIsDirty = false
}

dependencies {
	def appcompat_version = "1.2.0"

	implementation "androidx.appcompat:appcompat:$appcompat_version"

	// Convenient wrapper around DocumentContract. Might look into writing our own
	// to see if there's some performance to squeeze at some point, but doubt it.
	implementation "androidx.documentfile:documentfile:1.0.1"
	implementation "com.jakewharton:process-phoenix:2.1.2" //for restarting
        implementation 'ir.tapsell.plus:tapsell-plus-sdk-android:2.1.3'

}

android {
        
	compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        }

	flavorDimensions "variant"

	signingConfigs {
		debug {
			storeFile file("debug.keystore")
		}
		optimized {
			storeFile file("debug.keystore")
		}

		// Set these in a system global (or project local, but not checked in) gradle.properties .
        release {
            storeFile file("${rootProject.projectDir}/ludere.jks")
            storePassword 'ludere'
            keyAlias 'key0'
            keyPassword 'ludere'
        }
	
	}
	compileSdkVersion 29
	buildToolsVersion '29.0.3'
	defaultConfig {
		applicationId 'com.SandSprogrammingGroup.pes2022'
		minSdkVersion 27
		targetSdkVersion 29

		ndk {
			abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
		}
		signingConfig signingConfigs.debug
	}

        lintOptions {
            abortOnError false
        }

	buildTypes {
		debug {
			minifyEnabled = false
			jniDebuggable true
			signingConfig signingConfigs.debug
		}
		optimized {
			// Debug signed but optimized.
			minifyEnabled = false
			jniDebuggable true
			signingConfig android.buildTypes.debug.signingConfig
		}
		release {
			minifyEnabled = false
			signingConfig signingConfigs.release
		}
	}
	externalNativeBuild {
		cmake {
			path '../CMakeLists.txt'
		}
	}
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			res.srcDirs = ['res']
			java.srcDirs = ['src']
			aidl.srcDirs = ['src']
			resources.srcDirs = ['src']
			assets.srcDirs = [
					'../assets',
			]
			jni.srcDirs = ['..']
		}
		gold {
			res.srcDirs = ['gold/res']
		}
	}
	productFlavors {
		normal {
			applicationId 'com.SandSprogrammingGroup.pes2022'
			dimension "variant"
			externalNativeBuild {
				cmake {
					// Available arguments listed at https://developer.android.com/ndk/guides/cmake.html
					arguments '-DANDROID=true',
							'-DANDROID_PLATFORM=android-16',
							'-DANDROID_TOOLCHAIN=clang',
							'-DANDROID_CPP_FEATURES=',
							'-DANDROID_STL=c++_static',
							'-DANDROID_ARM_NEON=TRUE'
				}
			}
		}
		gold {
			applicationId 'com.SandSprogrammingGroup.pes2022'
			dimension "variant"
			externalNativeBuild {
				cmake {
					// Available arguments listed at https://developer.android.com/ndk/guides/cmake.html
					arguments '-DANDROID=true',
							'-DANDROID_PLATFORM=android-16',
							'-DANDROID_TOOLCHAIN=clang',
							'-DANDROID_CPP_FEATURES=',
							'-DANDROID_STL=c++_static',
							'-DANDROID_ARM_NEON=TRUE',
							'-DGOLD=TRUE'
				}
			}
		}
	}
	variantFilter { variant ->
		def needed = variant.name in [
			'normalRelease',	// for Google Play releases
		]
		variant.setIgnore(!needed)
	}
}
afterEvaluate {
	android.sourceSets.main.assets.getSrcDirs().each { println it }
}

// F-Droid lite version can be created with : ./gradlew assembleOptimized -Pf_droid
if (project.hasProperty("f_droid")) {
	project.android.sourceSets.main.java.srcDirs += 'libs/MogaStubs'
} else {
	project.dependencies {
		implementation files('libs/com.bda.controller.jar')
	}
}
